// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _sgcca_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _sgcca_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _sgcca_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _sgcca_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// sgccak_cpp
List sgccak_cpp(List A, NumericMatrix C, NumericVector c1, String scheme, LogicalVector scale, double long tol, String init, LogicalVector bias, LogicalVector verbose);
RcppExport SEXP _sgcca_sgccak_cpp(SEXP ASEXP, SEXP CSEXP, SEXP c1SEXP, SEXP schemeSEXP, SEXP scaleSEXP, SEXP tolSEXP, SEXP initSEXP, SEXP biasSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type A(ASEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type C(CSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< String >::type scheme(schemeSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< double long >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< String >::type init(initSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type bias(biasSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(sgccak_cpp(A, C, c1, scheme, scale, tol, init, bias, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sgcca_rcpparma_hello_world", (DL_FUNC) &_sgcca_rcpparma_hello_world, 0},
    {"_sgcca_rcpparma_outerproduct", (DL_FUNC) &_sgcca_rcpparma_outerproduct, 1},
    {"_sgcca_rcpparma_innerproduct", (DL_FUNC) &_sgcca_rcpparma_innerproduct, 1},
    {"_sgcca_rcpparma_bothproducts", (DL_FUNC) &_sgcca_rcpparma_bothproducts, 1},
    {"_sgcca_sgccak_cpp", (DL_FUNC) &_sgcca_sgccak_cpp, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_sgcca(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
